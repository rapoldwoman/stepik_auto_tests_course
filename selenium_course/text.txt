------------------------------------------------------------------------------------------------------------------------
3 вида alert

alert = browser.switch_to.alert
alert.accept()

confirm = browser.switch_to.alert
confirm.accept()
или 
confirm.dismiss()

prompt = browser.switch_to.alert
prompt.send_keys("My answer")
prompt.accept()

------------------------------------------------------------------------------------------------------------------------
ексепшен

NoSuchElementException - нет такого вообще
StaleElementReferenceException -  был элемент да сплыл
ElementNotVisibleException - видишь элемент? И я не вижу, а он есть.

------------------------------------------------------------------------------------------------------------------------
Если нам надо дождаться появления элемента (проверяет каждые 0.5 секунд)
метод 
Implicity_wait() 

browser = webdriver.Chrome()
# говорим WebDriver искать каждый элемент в течение 5 секунд
browser.implicitly_wait(5)


------------------------------------------------------------------------------------------------------------------------
Если нам надо дождаться, пока кнопка станет кликабельной

from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC	

button = WebDriverWait(browser, 5).until(
        EC.element_to_be_clickable((By.ID, "verify"))
    )

def until (до тех пор) - функция, в которую передается правило ожидания, элемент, а также значение, по которому мы будем искать элемент.

негативное правило until_not ( например если мы хотим проверить, что кнопка стала неактивной после отправки) 
# говорим Selenium проверять в течение 5 секунд пока кнопка станет неактивной
button = WebDriverWait(browser, 5).until_not(
        EC.element_to_be_clickable((By.ID, "verify"))
    )

В модуле expected_conditions есть много других правил:

title_is
title_contains
presence_of_element_located
visibility_of_element_located
visibility_of
presence_of_all_elements_located
text_to_be_present_in_element
text_to_be_present_in_element_value
frame_to_be_available_and_switch_to_it
invisibility_of_element_located
element_to_be_clickable
staleness_of
element_to_be_selected
element_located_to_be_selected
element_selection_state_to_be
element_located_selection_state_to_be
alert_is_present


Структура записи для ожидания текста - 
price = WebDriverWait(browser, 12).until(expected_conditions.text_to_be_present_in_element((By.ID, 'price'), '$100'))


------------------------------------------------------------------------------------------------------------------------
pip freeze > requirements.txt
Эта команда сохранит все версии пакетов в специальный файл requirements.txt.
------------------------------------------------------------------------------------------------------------------------

pytest scripts/selenium_scripts
# найти все тесты в директории scripts/selenium_scripts

pytest test_user_interface.py
# найти и выполнить все тесты в файле 

pytest scripts/drafts.py::test_register_new_user_parametrized
# найти тест с именем test_register_new_user_parametrized в указанном файле в указанной директории и выполнить 

------------------------------------------------------------------------------------------------------------------------

Исходя из комментариев и документации https://docs.pytest.org/en/latest/how-to/xunit_setup.html:

префиксы setup_*, teardown_* отвечают за порядок исполнения фикстур: до чего-то, после чего-то.
постфиксы *_class, *_method и другие отвечают за уровень применения фикстур: ко всему классу, к каждому методу в классе и тд.
Исходя их логики выше:

setup_class выполняется один раз перед запуском всех тестовых методов в классе
teardown_class выполянется один раз после
setup_method выполняется перед запуском каждого тестового метода в классе
teardown_method выполняется каждый раз после
Про декоратор:

@classmethod декоратор, использованный для удобства чтения кода. Так мы дополнительно размечаем в коде, что метод ниже (в нашем примере с *_class) применяется ко всему классу.


фикстуры - вспомогательные функции
финализаторы - yield

------------------------------------------------------------------------------------------------------------------------

@pytest.fixture(scope="class") “function”, “class”, “module”, “session”
@pytest.fixture(autouse=True)

------------------------------------------------------------------------------------------------------------------------
Маркировка тестов и пропуск тестов

# Запустится только smoke:
@pytest.mark.smoke : pytest -s -v -m smoke test_fixture.py

# Запуска всех тестов, не отмеченных как smoke:
@pytest.mark.smoke : pytest -s -v -m "not smoke" test_fixture.py

# Запуск тестов с разными маркировками:
@pytest.mark.smoke
@pytest.mark.regression : pytest -s -v -m "smoke or regression" test_fixture.py

# Запуск тестов имеющих несколько маркировок:
@pytest.mark.smoke
@pytest.mark.win10 : pytest -s -v -m "smoke and win10" test_fixture.py

# Пропуск тестов:
@pytest.mark.skip : pytest -s -v  test_fixture.py

# Помечать тест как ожидаемо падающий(пометка:XFAIL):
# упавший тест теперь отмечен как xfail, но результат прогона тестов помечен как успешный
# Когда баг починят, мы это узнаем, так как тест будет отмечен как XPASS
@pytest.mark.xfail : pytest -rx -v test_fixture.py

# reason - Чтобы увидеть это сообщение в консоли, при запуске нужно добавлять параметр pytest -rX
@pytest.mark.xfail(reason="fixing this bug right now") : pytest -rX -v test_fixture.py

# Параметр strict
# Ни XFAIL, ни XPASS по умолчанию не приводят к падению всего набора тестов.
# Но это можно изменить, установив параметру strict значение True:
# В этом случае, если тест будет неожиданно пройден (XPASS),
# то это приведет к падению всего тестового набора
@pytest.mark.xfail(strict=True) : pytest -rX -v test_fixture.py